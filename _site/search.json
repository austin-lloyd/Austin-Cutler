[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "About",
    "section": "",
    "text": "Hello! My name is Austin Cutler, I am a PhD candidate at Florida State University and a research fellow for the LeRoy Collins Institute. My research interests are broadly political behavior, with a special focus on polarization, partisanship, social identity theory, and methods. Much of my research focuses on furthering our understanding of how people form their attitudes and what the consequences of these attitudes are. You can view my CV here.\nBefore coming to Florida State, I received my master’s from the University of Mississippi in political science in 2021. I received my bachelor’s degree from SUNY Geneseo in 2019, where I double majored in political science and anthropology. I grew up in Buffalo, New York (go Bills!), and currently have two dogs, Roland and Zero (and a bonus picture of them together)."
  },
  {
    "objectID": "research.html",
    "href": "research.html",
    "title": "Research",
    "section": "",
    "text": "The Effect of Candidate Ideological Extremism on Vote Choice and Turnout (with Hans J.G. Hassell and Kevin Reuning)\nThis paper uses CES data from 2010 to 2022 to examine how voters’ perception of candidates’ ideological extremity influences their turnout and vote choice. Link to paper.\n\n\n\nWho’s in Office Anyways? Estimating the Race of Elected Officials from Names with Neural Networks"
  },
  {
    "objectID": "graphs.html",
    "href": "graphs.html",
    "title": "Data Viz",
    "section": "",
    "text": "I spend far too much time thinking about data visualization. To make that time a little more productive for myself, I’ll use this part of the website to show off whatever graphs I’ve most recently made for the projects I’m working on, as well as the accompanying code.\n\nThe Average Marginal Effect of In-party Candidate Extremism by District Partisan Advantage (2010 to 2022)\nThe paper this figure is in can be found here. The goal of this figure is to show how the average marginal effect of the ideological extremity of a respondent in the CES’s in-party candidate varies based on the level of district competition. The code below only includes the code for this figure specifically and not the remainder of the analysis. The tricky thing with this figure was getting the regions to be fully continuous, as PVI as an integer variable. Part of the code creates synthetic data at the points in between where the marginal effect is not significant and where it is to make the regions seamlessly change. I am not sure why geom_ribbon() does not just do this in the first place, but the approach I used worked just fine.\n\n\n\nCode\nlibrary(tidyverse)\nlibrary(mclogit)\n\n##reading in the data from before\nread_rds('observational/cleaned data/ces_cleaned.rds') -&gt; ces_cand_ideo_val\n\nread_csv('observational/data/extra_vars/pvi_all.csv') %&gt;% \n  filter(str_detect(seat, 'house') == TRUE) %&gt;% \n  rename(cd = district) %&gt;% \n  mutate(year = factor(year,\n                       levels = levels(ces_cand_ideo_val$year)),\n         cd   = str_replace(cd, \"(\\\\D)(\\\\d)\", \"\\\\1-\\\\2\")) %&gt;% \n  janitor::clean_names() -&gt; pvi\n\ntheme_set(theme_light()+\n            theme(legend.position = 'bottom',\n                  legend.text = element_text(size = 12),\n                  legend.title = element_text(size = 12),\n                  panel.grid = element_line(linetype = 2,\n                                            color = alpha('lightgray',.6)),\n                  strip.text   = element_text(color = 'white', size = 18,\n                                              face = 'bold'),\n                  axis.title = element_text(size = 20),\n                  axis.text  = element_text(size = 15)))\n\n###################################\n#insert code for the analysis here#\n###################################\n\n##in-party\nexpand.grid(\n  h_in_ext    = seq(from = min(ces_cand_ideo_val$h_in_ext, na.rm = TRUE), \n                    to = max(ces_cand_ideo_val$h_in_ext, na.rm = TRUE),\n                    by = .01),\n  pvi         = seq(from = min(ces_cand_ideo_val$pvi, na.rm = TRUE), \n                    to = max(ces_cand_ideo_val$pvi, na.rm = TRUE),\n                    by = 1),\n  h_out_ext   = median(ces_cand_ideo_val$h_out_ext, na.rm = TRUE),\n  pid_str     = median(ces_cand_ideo_val$pid_str, na.rm = TRUE),\n  ideo_str    = median(ces_cand_ideo_val$ideo_str, na.rm = TRUE),\n  age         = median(ces_cand_ideo_val$age, na.rm = TRUE),\n  age2        = median(ces_cand_ideo_val$age2, na.rm = TRUE),\n  educ2       = median(ces_cand_ideo_val$educ2, na.rm = TRUE),\n  race2       = median(ces_cand_ideo_val$race2, na.rm = TRUE),\n  gender      = factor('Female',\n                       levels = c(levels(ces_cand_ideo_val$gender))),\n  cd          = as.factor(factor('AZ-02')),\n  year        = as.factor(median(as.numeric(as.character(ces_cand_ideo_val$year))))) -&gt; test_i2\n\nmarginaleffects::slopes(fit, newdata = test_i2, variables = 'h_in_ext',\n                        type = 'response', by = 'pvi') %&gt;% \n  as_tibble() %&gt;% \n  rename(vote_choice = group) %&gt;% \n  select(vote_choice, pvi, estimate, conf.low,conf.high,predicted,\n         predicted_lo,predicted_hi,p.value) %&gt;% \n  mutate(vote_choice = case_when(vote_choice == 'no_turnout' ~ 'Abstain',\n                                 vote_choice == 'in_party' ~ 'Vote for In-party Candidate',\n                                 vote_choice == 'out_party' ~ 'Vote for Out-party Candidate',\n                                 vote_choice == 'other_cand' ~ 'Vote for Other Candidate'),\n         vote_choice = factor(vote_choice,\n                              levels = c('Abstain',\n                                         'Vote for In-party Candidate',\n                                         'Vote for Out-party Candidate',\n                                         'Vote for Other Candidate'))) -&gt; margin_in_full\n##graphing it\nmargin_in_full %&gt;% \n  mutate(sig   = ifelse(p.value &lt; .05, 'Yes', 'No'),\n         group = consecutive_id(sig)) -&gt; margin_in_full\n\n###making extra observations to fill in gaps on figure\nmargin_in_full %&gt;% \n  group_by(vote_choice,group) %&gt;% \n  filter(row_number() == 1|row_number() == n()) %&gt;% \n  group_by(vote_choice) %&gt;% \n  filter(abs(pvi) != 41) %&gt;% \n  ungroup() %&gt;% \n  mutate(group1 = rep(c(1:(nrow(.)/2)),each = 2)) -&gt; group_dat \n  \ngroup_dat %&gt;% \n  group_by(group1) %&gt;% \n  complete(pvi = full_seq(pvi,.01)) %&gt;% \n  fill(vote_choice,sig,group, .direction = 'downup') %&gt;%\n  mutate(across(c(estimate,conf.low,conf.high),\n                ~seq(first(.), last(.), length.out = n()))) %&gt;% \n  ungroup() %&gt;% \n  filter(!pvi %in% unique(ces_cand_ideo_val$pvi)) %&gt;% \n  select(-group1) %&gt;% \n  group_by(vote_choice) %&gt;% \n  distinct(pvi, .keep_all = TRUE) %&gt;% \n  ungroup() -&gt; fill_obs\n\n\n#putting it all together for the figure\nmargin_in_full %&gt;% \n  bind_rows(fill_obs) %&gt;% \n  ggplot(aes(x = pvi, y = estimate,\n             ymin = conf.low, ymax = conf.high))+\n  geom_ribbon(aes(color = sig, fill = sig,group = group), \n              alpha = 0.3, linetype = 2)+\n  geom_line(aes(color = sig, group = group),\n            linewidth = 1)+\n  geom_hline(aes(yintercept = 0), linetype = 2)+\n  geom_pointrange(data = filter(margin_in_full, abs(pvi) == 13|pvi==0),\n                  linewidth = .75)+\n  geom_label(data = filter(margin_in_full, abs(pvi) == 13|pvi==0),\n             aes(label = round(estimate, 3)), size = 3)+\n  facet_wrap(vars(vote_choice), nrow = 1)+\n  labs(y = 'Marginal Effect of In-party Candidate Extremity', \n       x = 'District Competition',\n       color = 'p &lt; 0.05', fill = 'p &lt; 0.05')+\n  scale_color_manual(values = c('Yes' = '#ff664d', 'No' = '#33ffcc'))+\n  scale_fill_manual(values = c('Yes' = '#ff664d', 'No' = '#33ffcc'))\n\n\n\n\nData Dashboard\nPart of my work with the LeRoy Collins Institute has been to work on our election audit dashboard. For this, I created an interactive dashboard using shiny to display both the audit data and ballot images for several elections from Leon county. We’re currently working to expand the project to several other counties. The data dashboard for the 2024 general election in Leon county can be found below, but can be opened in full screen (which is a better experience in my opinion) by clicking here. The dashboards for other years can be found on our website.\n\n  \n\n\n\nCode\n# Load necessary libraries and read data\nlibrary(tidyverse)\nlibrary(htmlwidgets)\nlibrary(DT)\nlibrary(sf)\nlibrary(shiny)\nlibrary(shinydashboard)\nlibrary(plotly)\nlibrary(shinyWidgets)\nlibrary(htmltools)\nlibrary(leaflet)\n\noptions(scipen = 999)\n\ntable_1 &lt;- read_csv('table_1.csv')\n\ntable_1 %&gt;% \n  mutate(`Difference_Choice Recorded` = `Difference_Choice Recorded`*-1,\n         `Difference_Ballots Counted` = `Difference_Ballots Counted`*-1) %&gt;% \n  select(Contest, Choice, `Dominion_Ballots Counted`, `ClearBallot_Ballots Counted`,\n         `Difference_Ballots Counted`, `Dominion_Choice Recorded`, `ClearBallot_Choice Recorded`,\n         `Difference_Choice Recorded`,`Overvoted WithVote for this Choice`, \n         `Undervoted WithoutVote for this Choice`) %&gt;% \n  rename('Ovals \\n Counted \\n Dominion'    = `Dominion_Ballots Counted`, \n         'Audit Ovals \\n Counted \\n ClearBallot' = `ClearBallot_Ballots Counted`,\n         'Difference in \\n Ovals \\n Counted' = `Difference_Ballots Counted`, \n         'Certified\\nVote Count'     = `Dominion_Choice Recorded`, \n         'Audit\\nVote Count'  = `ClearBallot_Choice Recorded`,\n         'Difference\\nin Counts'     = `Difference_Choice Recorded`,\n         'Over \\n Vote'                            = `Overvoted WithVote for this Choice`, \n         'Under \\n Vote'                           =`Undervoted WithoutVote for this Choice`) %&gt;% \n  select(-contains('Ovals')) -&gt; table_1\n\ntable_2 &lt;- fst::read_fst('leon_2024g.fst')\n\ntable_2 %&gt;% \n  rename('Ballot ID'              = BallotID,\n         'Choice'                 = cand,\n         'Vote Type'              = vote_type,\n         'Ballot Link'            = view_ballot,\n         #'Oval Confidence Rank'   = oval_confidence_rank,\n         'Voting Method'          = vote_mode,\n         'Precinct'               = PrecinctID) -&gt; table_2\n\nst_read('Shape files - combined precincts', layer = 'Leon_ShapeFile') %&gt;% \n  mutate(PRECINCT = str_replace_all(PRECINCT, '/', ' & ')) -&gt; map\n\nst_transform(map,crs = 4326) -&gt; map\n\nSys.setenv('MAPBOX_TOKEN' = 'pk.eyJ1IjoiYXVzdGluLWN1dGxlciIsImEiOiJjbGt0enpwZG4wMW5iM3NsaDAxNjBoMm5nIn0.oBeanbdPK0aurRNUJG7jIg')\n\n\noutline &lt;- function(x){\n  htmlwidgets::onRender(x,\n                        \"function(el, x) {\n                          // Add hover event\n                          el.on('plotly_hover', function(data) {\n                            // Loop through each point hovered over\n                            data.points.forEach(function(point) {\n                              Plotly.restyle(el, {'marker.line.color': 'black', 'marker.line.width': 2}, [point.curveNumber]);\n                            });\n                          });\n                          // Add unhover event to reset the color\n                          el.on('plotly_unhover', function(data) {\n                            data.points.forEach(function(point) {\n                              Plotly.restyle(el, {'marker.line.color': 'rgba(0,0,0,0)', 'marker.line.width': 0}, [point.curveNumber]);\n                            });\n                          });\n                        }\n                        \"\n  )\n}\n\nui &lt;- fluidPage(\n  tags$div(id = \"map\"),\n  verbatimTextOutput(\"selected_precinct\"),\n  tags$head(\n    tags$style(HTML(\n      '.sidebar-toggle{position: absolute; left: 0;}',\n      '.skin-blue .main-header .logo {\n        background-color:  white;\n      }',\n      '.skin-blue .main-header .logo:hover {\n          background-color:  white;\n        }',\n      '.skin-blue .sidebar-menu&gt;li&gt;a{\n        background-color:white;\n        border-bottom: 1px solid #000000;\n      }',\n      '.skin-blue .sidebar-menu&gt;li&gt;a:hover{\n        background-color:white;\n        border-left: 3px solid #782F40;\n      }',\n      '.skin-blue .main-header .navbar {\n          background-color:  white;\n          margin-left: 0px !important;\n        }',\n      '.skin-blue .main-sidebar {\n          background-color:  white;\n        }',\n      '.skin-blue .main-sidebar .sidebar .sidebar-menu .active a{\n          background-color: white;\n        }',\n      '.skin-blue .main-header .logo {\n        background-color:  white;\n        color: black;\n      }',\n      '.skin-blue .main-header .logo:hover {\n          background-color:  white;\n        }',\n      '.skin-blue .main-header .navbar {\n          background-color:  white;\n          color: #000000;\n        }',\n      '.skin-blue .main-header .navbar .sidebar-toggle {\n          color: #000000;\n          background-color: #dfedeb;\n          border-bottom: 2px solid black;\n          border-right: 2px solid black;}',\n      '.skin-blue .main-header .navbar .sidebar-toggle:hover {\n          background-color: #782F40;}',\n      '.skin-blue .main-sidebar {\n          background-color:  white;\n        }\n      ',\n      'skin-blue .main-sidebar .sidebar .sidebar-menu .active a{\n          background-color: #782F40;\n        }',\n      '.main-header .sidebar-toggle:before {\n        content: \"Filter Dashboard\";\n        font-family: calibri;\n        font-size: 15px;\n        font-weight: 900;\n      }',\n      \".content-wrapper { background-color: white; margin: 0}\",\n      '.container-fluid {font-size: 12px; padding: 0}',\n      \".custom-select-wrapper {margin:1px; background-color: #dfedeb;}\",\n      \".custom-select {margin:1px; width: 100%; max-width: 350px; background-color: #dfedeb;}\",\n      \".stripe tbody tr:nth-child(even) { background-color: #dfedeb; }\",\n      '.shiny-input-container:not(.shiny-input-container-inline){max-height: 43px;color: #000000; background-color: white;}',\n      '.shiny-input-checkboxgroup {margin:1px; background-color: white; justify-content: center; color: #000000;}',\n      '.shiny-input-checkboxgroup.shiny-input-container-inline label~.shiny-options-group, .shiny-input-radiogroup.shiny-input-container-inline label~.shiny-options-group{margin-left: 1px}',\n      '.js-irs-0 {background: #dfedeb; }',\n      '.js-irs-0 .irs-bar-edge {background: #dfedeb; }',\n      '.box {margin:1px; border: 1px solid white; -webkit-box-shadow: none; -moz-box-shadow: none;box-shadow: none;}', \n      '.box-header { background-color: #f9f9f9; }',\n      '.selectize-control { padding-left: 7px; padding-right: 7px; margin-bottom:100px;color: #000000;}',\n      '.shiny-input-radiogroup {margin: 1px; background-color: white; justify-content: center;color: #000000;}',\n      \".plotly { max-width: 100%;margin:1px }\",\n      \".content-body {margin:1px; padding: 0; }\",\n      \".dataTable-wrapper { margin: 1px;}\",\n      \".row { margin-bottom: 0; }\",\n      '.col-special {margin-right:-15px}',\n      '.box-body {padding: 1px}',\n      '.total-table{margin:0; justify-content: center}',\n      '.link{color: #782F40; font-size: 25px; color: #782F40;font-weight: bold}',\n      '.link:hover{color: #00524d}'\n    )),\n    tags$script(\n      \"$(document).ready(function(){\n    var mapPlots = document.getElementsByClassName('plotly');\n    if (mapPlots.length &gt; 0) {\n      for (var i = 0; i &lt; mapPlots.length; i++) {\n        mapPlots[i].addEventListener('plotly_relayout', function(eventdata){\n          Plotly.relayout(this, {autosize: true});\n        });\n      }\n    }\n  });\"\n    )\n  ),\n  dashboardPage(\n    dashboardHeader(),\n    dashboardSidebar(collapsed = TRUE,\n                     sidebarMenu(h2(style = 'text-align: left; 24px; font-weight: bold; color:  #782F40;',\n                                    div(HTML('&lt;p&gt;Audit Filters&lt;/p&gt;'))),\n                                 menuItem(div(style = 'padding-bottom: 20px',\n                                              selectInput(\"Contest\", label = \"Contest\",\n                                                          selected = 'President and Vice President',\n                                                          choices = c('All', unique(table_1$Contest))))),\n                                 menuItem(selectInput(\"Candidate\", label = \"Choice\",\n                                                      choices = c(\"All\", unique(table_1$Choice)))),\n                                 h2(style = 'text-align: left; 24px; font-weight: bold; color: #782F40;',\n                                    div(HTML('&lt;p&gt;Ballot Filters&lt;/p&gt;'))),\n                                 menuItem(radioButtons(\"OvalCat\", label = \"Oval Confidence Rank\",\n                                                       choices = c(\"All\", '1-20'), inline = TRUE, selected = 'All')),\n                                 menuItem(checkboxGroupInput(\"VotingMethod\", label = \"Voting Method\",\n                                                             selected = c('Election Day Vote'),\n                                                             choices = c(unique(table_2$`Voting Method`)),\n                                                             inline = TRUE)),\n                                 menuItem(selectInput(\"Precinct\", label = \"Precinct\",\n                                                      choices = c(\"All\", unique(table_2$Precinct)))),\n                                 menuItem(checkboxGroupInput(\"VoteType\", label = \"Vote Type\", \n                                                             choices = c('Voted for Choice',\n                                                                         'Voted for Other Choice',\n                                                                         'Overvote', 'Undervote'),  \n                                                             selected = c('Voted for Choice'),\n                                                             inline = TRUE)))\n    ),\n    dashboardBody(\n      tags$script(\n        HTML(\n          \"$(document).on('shiny:connected', function(event) {\n    $(document).on('click', function(evt) {\n        // Get the sidebar element\n        var el = document.getElementById('sidebarCollapsed');\n        \n        // Check if the click is outside the sidebar and if the sidebar is currently not collapsed\n        if (!$(evt.target).closest('#sidebarCollapsed').length && el.getAttribute('data-collapsed') !== 'true') {\n            // Collapse the sidebar and set data-collapsed to true\n            el.setAttribute('data-collapsed', 'true');\n            $('body').addClass('sidebar-collapse'); // Collapse the sidebar using the class\n        }\n    });\n\n    // Event to reopen the sidebar when the toggle button is clicked\n    $('#sidebar-toggle').on('click', function() {\n        var el = document.getElementById('sidebarCollapsed');\n        \n        // Toggle data-collapsed attribute between 'true' and 'false'\n        if (el.getAttribute('data-collapsed') === 'true') {\n            el.setAttribute('data-collapsed', 'false');\n            $('body').removeClass('sidebar-collapse'); // Remove class to expand sidebar\n        } else {\n            el.setAttribute('data-collapsed', 'true');\n            $('body').addClass('sidebar-collapse'); // Add class to collapse sidebar\n        }\n    });\n});\n$(document).on('click', '#resetButton', function() {\n      Shiny.setInputValue('reset_map_filter', Math.random());\n    });\n\"\n        )),\nfluidRow(column(width=5,\n                box(width = 12, solidHeader = TRUE,\n                    div(HTML('&lt;p&gt; &lt;a class = \"link\" \n         href=\"https://fsu.qualtrics.com/jfe/form/SV_dj1SffcmA9nC4dw\"&gt;Click here to tell us about your experience!&lt;/a&gt;&lt;/p&gt;')))),\n         column(width = 7,\n                box(width = 12,\n                    h3(\"Aggregate Audit Data\", style = \"text-align: left; font-size: 24px; font-weight: bold; margin: 0;\"))\n         )\n),\nfluidRow(\n  box(width = 3, solidHeader = TRUE,\n      column(width = 12, \n             \n      )\n  ),\n  column(width = 12,\n         box(width = 4, solidHeader = TRUE,\n             #h3(\"space\", style = \"text-align: left; font-size: 24px; font-weight: bold; margin: 0;color:white;\"),\n             div(style = \"display: flex; justify-content: center;\",\n                 div(style = \"width: 100%; height: 100%;\", \n                     plotlyOutput(\"diff_plot\")\n                 )\n             )\n         ),\n         box(width = 4, solidHeader = TRUE,\n             \n             div(style = \"display: flex; justify-content: center;\",\n                 div(style = \"width: 100%; height: 100%;\", \n                     plotlyOutput(\"ag_plot1\")\n                 )\n             )\n         ),\n         #box(width = 3, solidHeader = TRUE,\n         \n         #     div(style = \"display: flex; justify-content: center;\",\n         #         div(style = \"width: 100%; height: 100%;\", \n         #             plotlyOutput(\"ag_plot2\")\n         #         )\n         #     )\n         # ),\n         box(width = 4, solidHeader = TRUE,\n             \n             div(style = \"display: flex; justify-content: center;\",\n                 div(style = \"width: 100%; height: 100%;\", \n                     plotlyOutput(\"ag_plot3\")\n                 )\n             )\n         )\n  )\n),\nfluidRow(\n  box(width = 12,\n      div(\n        DTOutput(\"my_table\")\n      )\n  ),\n  fluidRow(\n    column(width = 10),\n    column(width = 1,\n           downloadButton('aud_tab_download', 'Download Audit Data'))\n  )\n),\nfluidRow(\n  box(width = 8, solidHeader = TRUE,\n      div(\n        DTOutput(\"my_table_2\"))\n  ),\n  column(width = 4,\n         box(width = 12, solidHeader = TRUE,\n             h3(\"Leon County Precincts\", style = \"text-align: center; font-size: 24px; font-weight: bold; margin: 0;\"),\n             div(style = \"display: flex; justify-content: center;\",\n                 div(style = \"width: 100%; height: 100%;\", \n                     leafletOutput(\"map_plot\")\n                 )\n             )\n         )\n  )\n)\n    )\n  )\n)\n\n# Create the Shiny app server\nserver &lt;- function(input, output, session) {\n  \n  filtered_table &lt;- reactive({\n    filtered &lt;- table_1\n    \n    # Handle Contest filter\n    if (input$Contest != \"All\" && !is.null(input$Contest)) {\n      filtered &lt;- filter(filtered, Contest == input$Contest)\n    }\n    \n    if (input$Candidate != 'All' && !is.null(input$Candidate)){\n      filtered &lt;- filter(filtered, Choice == input$Candidate)\n    }\n    \n    filtered \n  })\n  \n  \n  sketch &lt;- htmltools::tags$table(\n    tableHeader(names(table_1)),\n    tableFooter(rep(\"\", ncol(table_1)))\n  )\n  \n  output$my_table &lt;- renderDT({\n    datatable(filtered_table(), filter = 'none', \n              escape = FALSE, \n              options = list(scrollY = 200, dom = 'Bfrtip', lengthMenu = list(-1),\n                             searching = FALSE, info = FALSE, paging = FALSE),\n              rownames = FALSE, \n              selection = 'none',\n              class = 'cell-border stripe',\n              fillContainer = TRUE,\n              container = sketch\n    )\n  })\n  \n  output$aud_tab_download &lt;- downloadHandler(filename = 'audit_data.csv',\n                                             content = function(con){\n                                               write_csv(filtered_table(), con)\n                                             })\n  \n  filtered_choices &lt;- reactive({\n    choices &lt;- c('All', unique(table_1$Choice))\n    \n    # Handle Contest filter\n    if (input$Contest != \"All\" && !is.null(input$Contest)) {\n      choices &lt;- c('All', unique(table_1$Choice[table_1$Contest == input$Contest]))\n    }\n    \n    choices\n  })\n  \n  observe({updateSelectInput(session, inputId=\"Candidate\", \n                             choices = c(filtered_choices()),\n                             selected = 'All')})\n  \n  output$ag_plot1 &lt;- renderPlotly({ \n    if (input$Contest != \"All\") {\n      \n      #making the plot data\n      aggregated_data1 &lt;- filtered_table() %&gt;% \n        group_by(Contest) %&gt;% \n        select(-contains('Difference')) %&gt;% \n        summarize(across(where(is.numeric), \\(x) sum(x, na.rm = TRUE)),\n                  `Under \\n Vote` = `Under \\n Vote`/n()) %&gt;% \n        pivot_longer(cols = c(`Certified\\nVote Count`:`Under \\n Vote`),\n                     values_to = 'Count') %&gt;% \n        filter(name %in% c('Audit\\nVote Count',\n                           'Certified\\nVote Count')) %&gt;% \n        mutate(name = factor(name,\n                             levels = c('Certified\\nVote Count',\n                                        'Audit\\nVote Count')))\n    }\n    \n    if (input$Contest == \"All\" && !is.null(input$Contest)) {\n      aggregated_data1 &lt;- filtered_table() %&gt;% \n        select(-contains('Difference')) %&gt;% \n        summarize(across(where(is.numeric), \\(x) sum(x, na.rm = TRUE))) %&gt;% \n        pivot_longer(cols = c(`Certified\\nVote Count`:`Under \\n Vote`),\n                     values_to = 'Count') %&gt;% \n        filter(name %in% c('Audit\\nVote Count',\n                           'Certified\\nVote Count')) %&gt;% \n        mutate(name = factor(name,\n                             levels = c('Certified\\nVote Count',\n                                        'Audit\\nVote Count')))\n    }\n    #making the plot\n    gg &lt;- ggplot(aggregated_data1, \n                 aes(x = name, y = Count, fill = name,\n                     text = ifelse(name == 'Audit\\nVote Count',\n                                   'Audit conducted using Clear Ballot Machines.', \n                                   'Votes counted using Dominion Machines.'))) +\n      geom_bar(stat = 'identity', position = position_dodge(.95)) +\n      geom_text(aes(y = Count*1.025, \n                    label = paste('&lt;b&gt;', scales::comma(Count), '&lt;/b&gt;', sep = '')))+\n      scale_y_continuous(labels = scales::comma)+\n      labs(x = '', y = '', title = 'Votes')+\n      theme_minimal() +\n      theme(legend.position = 'none',\n            plot.title = element_text(hjust = .5,\n                                      face = 'bold'),\n            strip.background = element_blank(),\n            strip.text.x = element_blank()) \n    \n    #converting to plotly\n    outline(ggplotly(gg,tooltip = c('text'))) %&gt;% \n      config(modeBarButtonsToAdd = c('toImage'),\n             modeBarButtonsToRemove = c('select','hoverClosestCartesian',\n                                        'hoverCompareCartesian','lasso2d'),\n             displaylogo = FALSE) %&gt;% \n      layout(xaxis = list(fixedrange = TRUE),\n             yaxis = list(fixedrange = TRUE))\n    \n  })\n  \n  #output$ag_plot2 &lt;- renderPlotly({ \n  #  if (input$Contest != \"All\") {\n  \n  #making the plot data\n  #    aggregated_data2 &lt;- filtered_table() %&gt;% \n  #      group_by(Contest) %&gt;% \n  #      select(-contains('Difference')) %&gt;% \n  #      summarize(across(where(is.numeric), \\(x) sum(x, na.rm = TRUE)),\n  #                `Under \\n Vote` = `Under \\n Vote`/n()) %&gt;% \n  #      pivot_longer(cols = c(`Ovals \\n Counted \\n Dominion`:`Under \\n Vote`),\n  #                   values_to = 'Count') %&gt;% \n  #      filter(name %in% c('Audit Ovals \\n Counted \\n ClearBallot',\n  #                         'Ovals \\n Counted \\n Dominion')) %&gt;% \n  #      mutate(name = factor(name,\n  #                           levels = c('Ovals \\n Counted \\n Dominion',\n  #                                      'Audit Ovals \\n Counted \\n ClearBallot')))\n  #  }\n  \n  #  if (input$Contest == \"All\" && !is.null(input$Contest)) {\n  #    aggregated_data2 &lt;- filtered_table() %&gt;% \n  #      select(-contains('Difference')) %&gt;% \n  #      summarize(across(where(is.numeric), \\(x) sum(x, na.rm = TRUE))) %&gt;% \n  #      pivot_longer(cols = c(`Ovals \\n Counted \\n Dominion`:`Under \\n Vote`),\n  #                   values_to = 'Count') %&gt;% \n  #      filter(name %in% c('Audit Ovals \\n Counted \\n ClearBallot',\n  #                         'Ovals \\n Counted \\n Dominion')) %&gt;% \n  #      mutate(name = factor(name,\n  #                           levels = c('Ovals \\n Counted \\n Dominion',\n  #                                      'Audit Ovals \\n Counted \\n ClearBallot')))\n  #  }\n  #making the plot\n  #  gg &lt;- ggplot(aggregated_data2,\n  #               aes(x = name, y = Count, fill = name,\n  #                   text = paste(ifelse(name == 'Audit Ovals \\n Counted \\n ClearBallot',\n  #                                       'Audit Ovals', 'Ovals'), 'Count:', scales::comma(Count)))) +\n  #    geom_bar(stat = 'identity', position = position_dodge(.95)) +\n  #    geom_text(aes(y = Count*1.025, \n  #                  label = paste('&lt;b&gt;', scales::comma(Count), '&lt;/b&gt;', sep = '')))+\n  #    scale_y_continuous(labels = scales::comma)+\n  #    labs(x = '', y = '', title = 'Ovals')+\n  #    theme_minimal() +\n  #    theme(legend.position = 'none',\n  #          plot.title = element_text(hjust = .5,\n  #                                    face = 'bold'),\n  #          strip.background = element_blank(),\n  #          strip.text.x = element_blank()) \n  \n  #converting to plotly\n  #  outline(ggplotly(gg,tooltip = c('text')))  %&gt;% \n  #    config(displayModeBar = FALSE) %&gt;% \n  #    layout(xaxis = list(fixedrange = TRUE),\n  #           yaxis = list(fixedrange = TRUE))\n  \n  #})\n  \n  output$ag_plot3 &lt;- renderPlotly({ \n    if (input$Contest != \"All\") {\n      \n      #making the plot data\n      aggregated_data3 &lt;- filtered_table() %&gt;% \n        group_by(Contest) %&gt;% \n        select(-contains('Difference')) %&gt;% \n        summarize(across(where(is.numeric), \\(x) sum(x, na.rm = TRUE)),\n                  `Under \\n Vote` = `Under \\n Vote`/n()) %&gt;% \n        pivot_longer(cols = c(`Certified\\nVote Count`:`Under \\n Vote`),\n                     values_to = 'Count') %&gt;% \n        filter(name %in% c('Over \\n Vote', 'Under \\n Vote')) %&gt;% \n        mutate(name = factor(name,\n                             levels = c('Over \\n Vote', 'Under \\n Vote')))\n    }\n    \n    if (input$Contest == \"All\" && !is.null(input$Contest)) {\n      aggregated_data3 &lt;- filtered_table() %&gt;% \n        select(-contains('Difference')) %&gt;% \n        summarize(across(where(is.numeric), \\(x) sum(x, na.rm = TRUE))) %&gt;% \n        pivot_longer(cols = c(`Certified\\nVote Count`:`Under \\n Vote`),\n                     values_to = 'Count') %&gt;% \n        filter(name %in% c('Over \\n Vote', 'Under \\n Vote')) %&gt;% \n        mutate(name = factor(name,\n                             levels = c('Over \\n Vote', 'Under \\n Vote')))\n    }\n    #making the plot\n    gg &lt;- ggplot(aggregated_data3, \n                 aes(x = name, y = Count, fill = name,\n                     text = ifelse(name == 'Over \\n Vote',\n                                   'An overvote is when a person casts votes for\\nmore than one candidate in a given contest.',\n                                   'An undervote is when a voter does not cast a\\nvote for any candidate in a given contest.'))) +\n      geom_bar(stat = 'identity', position = position_dodge(.95)) +\n      geom_text(aes(y = ifelse(name == 'Over \\n Vote', Count*1.35, Count*1.025), \n                    label = paste('&lt;b&gt;', scales::comma(Count), '&lt;/b&gt;', sep = '')))+\n      scale_y_continuous(labels = scales::comma)+\n      labs(x = '', y = '', title = 'Vote Type')+\n      scale_fill_brewer(palette = 'Accent')+\n      theme_minimal() +\n      theme(legend.position = 'none',\n            plot.title = element_text(hjust = .5,\n                                      face = 'bold'),\n            strip.background = element_blank(),\n            strip.text.x = element_blank()) \n    \n    #converting to plotly\n    outline(ggplotly(gg,tooltip = c('text'))) %&gt;% \n      config(modeBarButtonsToAdd = c('toImage'),\n             modeBarButtonsToRemove = c('select','hoverClosestCartesian',\n                                        'hoverCompareCartesian','lasso2d'),\n             displaylogo = FALSE) %&gt;%  \n      layout(xaxis = list(fixedrange = TRUE),\n             yaxis = list(fixedrange = TRUE))\n    \n  })\n  \n  output$diff_plot &lt;- renderPlotly({ \n    if (input$Contest != \"All\") {\n      \n      #making the plot data\n      diff_dat &lt;- filtered_table() %&gt;% \n        mutate(`Difference\\nin Counts` = (`Difference\\nin Counts`),\n               Choice = str_replace_all(Choice, ' ', '\\n')) %&gt;% \n        select(Contest,Choice,`Difference\\nin Counts`) %&gt;% \n        pivot_longer(cols = `Difference\\nin Counts`,\n                     values_to = 'Count')\n    }\n    \n    if (input$Contest == 'All'){\n      diff_dat &lt;- filtered_table() %&gt;% \n        select(`Difference\\nin Counts`) %&gt;% \n        summarize(Count = sum(abs(`Difference\\nin Counts`))) %&gt;% \n        mutate(Choice = 'Total')\n    }\n    \n    if (input$Contest != 'All'){\n      lims &lt;- ylim(0,5)\n      nudge &lt;- .15\n      diff_lab &lt;- labs(x = 'Choice', y = 'Count',\n                       title = 'Difference in Votes Recorded')\n      text &lt;- ifelse(diff_dat$Count &lt; 0,\n                     paste(abs(diff_dat$Count), \n                           'more vote(s) were cast for this choice/candidate than counted on election day.',\n                           sep = ' '),\n                     ifelse(diff_dat$Count == 0,\n                            'The vote count from election day and the audit were the same for this choice/candidate.',\n                            paste(abs(diff_dat$Count), 'less vote(s) were cast for this choice/candidate than counted on election day.',\n                                  sep = ' ')))\n    }\n    \n    if(input$Contest == 'All'){\n      lims &lt;- ylim(0,50)\n      nudge &lt;- 1\n      diff_lab &lt;- labs(x = '', y = 'Count',\n                       title = 'Difference in Votes Recorded')\n      text &lt;- 'The absolute total of differences found between the certified election and audit.'\n    }\n    \n    #making the plot\n    gg1 &lt;- ggplot(diff_dat, aes(x = Choice, y = abs(Count), fill = Choice,\n                                text = text)) +\n      geom_bar(stat = 'identity') +\n      lims+\n      diff_lab+\n      geom_text(aes(label = paste('&lt;b&gt;', abs(Count), '&lt;/b&gt;', sep = '')), nudge_y = nudge)+\n      scale_fill_brewer(palette = 'Dark2')+\n      theme_minimal() +\n      theme(legend.position = 'none',\n            plot.title = element_text(hjust = .5,\n                                      face = 'bold'),\n            strip.background = element_blank(),\n            strip.text.x = element_blank()) \n    \n    #converting to plotly\n    outline(ggplotly(gg1,tooltip = c('text'))) %&gt;% \n      config(modeBarButtonsToAdd = c('toImage'),\n             modeBarButtonsToRemove = c('select','hoverClosestCartesian',\n                                        'hoverCompareCartesian','lasso2d'),\n             displaylogo = FALSE) %&gt;%  \n      layout(xaxis = list(fixedrange = TRUE),\n             yaxis = list(fixedrange = TRUE))\n    \n  })\n  \n  filtered_table_2 &lt;- reactive({\n    filtered &lt;- table_2\n    \n    if (!is.null(input$VotingMethod) && length(input$VotingMethod) &gt; 0) {\n      filtered &lt;- filter(filtered, `Voting Method` %in% input$VotingMethod)\n    }\n    \n    if (is.null(input$VotingMethod) && length(input$VotingMethod) == 0){\n      filtered &lt;- filtered[NULL,]\n    }\n    \n    if (input$Contest != \"All\" && !is.null(input$Contest)) {\n      filtered &lt;- filter(filtered, Contest == input$Contest)\n    }\n    \n    if (!is.null(input$VoteType) && length(input$VoteType) &gt; 0) {\n      filtered &lt;- filter(filtered, `Vote Type` %in% input$VoteType)\n    }\n    \n    if (is.null(input$VoteType) && length(input$VoteType) == 0){\n      filtered &lt;- filtered[NULL,]\n    }\n    \n    if (input$OvalCat != \"All\" && input$OvalCat == '1-20') {\n      filtered &lt;- filter(filtered,  `Oval Confidence Rank` &lt;= 20)\n    }\n    \n    if (input$Precinct != 'All' && !is.null(input$Precinct)){\n      filtered &lt;- filter(filtered, Precinct == input$Precinct)\n    }\n    \n    if (input$Candidate != 'All' && !is.null(input$Candidate)){\n      filtered &lt;- filter(filtered, Choice == word(input$Candidate, -1))\n    }\n    \n    select(filtered, -oval_cat)\n  })\n  \n  \n  output$my_table_2 &lt;- renderDT({\n    datatable(filtered_table_2(), filter = 'none', \n              options = list(rowsGroups = list(0),\n                             scrollY = 300, dom = 'Bfrtip', lengthMenu = list(5000, -1),\n                             searching = FALSE, info = FALSE, serverSide = TRUE, deferRender = TRUE, virtualScroll = TRUE),\n              rownames = FALSE, \n              selection = 'none',\n              class = 'cell-border stripe',\n              fillContainer = TRUE,\n              escape = FALSE,\n              callback = JS('table.page(1).draw(false);')\n    ) %&gt;% formatStyle(columns = 'Ballot Link',\n                      target = 'row', \n                      css = list(\"display:block; width:100%\"))\n  })\n  \n  \n  filtered_map_plot &lt;- reactive({\n    \n    my_palette &lt;- c(\"#D3D3D3\", \"#00524d\")\n    \n    if (input$Precinct != 'All' && !is.null(input$Precinct)){\n      selected_precinct &lt;- input$Precinct\n      map$color &lt;- ifelse(map$PRECINCT == selected_precinct, \"#00524d\", \"#D3D3D3\")\n      \n      leaflet(data = map,\n              options = leafletOptions(\n                dragging = FALSE,\n                minZoom = 9,\n                zoomControl = FALSE,\n                scrollWheelZoom = FALSE,\n                doubleClickZoom = FALSE,\n                boxZoom = FALSE,\n                touchZoom = FALSE\n              )) %&gt;%\n        addProviderTiles('CartoDB.Voyager') %&gt;% \n        addPolygons(\n          fillColor = ~color,\n          fillOpacity = .75,\n          color = \"#000000\",  # Border color\n          weight = 1,\n          opacity = 1,\n          layerId = ~PRECINCT,\n          label = ~PRECINCT,\n          highlight = highlightOptions(\n            weight = 2,\n            color = \"#000000\",\n            fillColor = '#00524d',\n            fillOpacity = 0.75,\n            bringToFront = TRUE\n          )\n        ) %&gt;%\n        setView(lng = -84.353334, lat = 30.455000, zoom = 9.45) %&gt;%  \n        onRender(\"\n  function(el, x) {\n    var map = this;\n\n    // Compute bounds from polygons\n    var bounds = L.latLngBounds([]);\n\n    map.eachLayer(function(layer) {\n      if (layer instanceof L.Polygon) {\n        try {\n          bounds.extend(layer.getBounds());\n        } catch (e) {}\n      }\n    });\n\n    if (bounds.isValid()) {\n      map.fitBounds(bounds, {padding: [10, 10]});\n\n      // Delay zoom correction slightly so it happens after fitBounds\n      setTimeout(function() {\n        var currentZoom = map.getZoom();\n        var minZoom = 9; // Set your minimum zoom level here\n        if (currentZoom &lt; minZoom) {\n          map.setZoom(minZoom);\n        }\n      }, 250);\n    }\n\n    // Add zoom control to top right\n    L.control.zoom({ position: 'topright' }).addTo(map);\n  }\n\") %&gt;% \n        addControl(\n          html = \"\n    &lt;style&gt;\n      #resetButton {\n        padding: 6px;\n        font-size: 12px;\n        background: #f5f5f5;\n        border: 1px solid #ccc;\n        border-radius: 4px;\n        cursor: pointer;\n        transition: background 0.3s;\n      }\n      #resetButton:hover {\n        background: #00524d;\n        color: #D3D3D3;\n      }\n    &lt;/style&gt;\n    &lt;button id='resetButton'&gt;All Precincts&lt;/button&gt;\n  \",position = \"topleft\"\n        )\n    } else {\n      map$color &lt;- \"#00524d\"\n      \n      leaflet(data = map,\n              options = leafletOptions(\n                dragging = FALSE,\n                minZoom = 9,\n                zoomControl = FALSE,\n                scrollWheelZoom = FALSE,\n                doubleClickZoom = FALSE,\n                boxZoom = FALSE,\n                touchZoom = FALSE\n              )) %&gt;%\n        addProviderTiles('CartoDB.Voyager') %&gt;% \n        addPolygons(\n          fillColor = ~color,\n          fillOpacity = .75,\n          color = \"#000000\",  # Border color\n          weight = 1,\n          opacity = 1,\n          layerId = ~PRECINCT,\n          label = ~PRECINCT,\n          highlight = highlightOptions(\n            weight = 2,\n            color = \"#000000\",\n            fillColor = '#00524d',\n            fillOpacity = 0.75,\n            bringToFront = TRUE\n          )\n        ) %&gt;%\n        setView(lng = -84.353334, lat = 30.455000, zoom = 9.45) %&gt;% \n        onRender(\"\n  function(el, x) {\n    var map = this;\n\n    // Compute bounds from polygons\n    var bounds = L.latLngBounds([]);\n\n    map.eachLayer(function(layer) {\n      if (layer instanceof L.Polygon) {\n        try {\n          bounds.extend(layer.getBounds());\n        } catch (e) {}\n      }\n    });\n\n    if (bounds.isValid()) {\n      map.fitBounds(bounds, {padding: [10, 10]});\n\n      // Delay zoom correction slightly so it happens after fitBounds\n      setTimeout(function() {\n        var currentZoom = map.getZoom();\n        var minZoom = 9; // Set your minimum zoom level here\n        if (currentZoom &lt; minZoom) {\n          map.setZoom(minZoom);\n        }\n      }, 250);\n    }\n\n    // Add zoom control to top right\n    L.control.zoom({ position: 'topright' }).addTo(map);\n  }\n\") %&gt;%  \n        addControl(\n          html = \"\n    &lt;style&gt;\n      #resetButton {\n        padding: 6px;\n        font-size: 12px;\n        background: #f5f5f5;\n        border: 1px solid #ccc;\n        border-radius: 4px;\n        cursor: pointer;\n        transition: background 0.3s;\n      }\n      #resetButton:hover {\n        background: #00524d;\n        color: #D3D3D3;\n      }\n    &lt;/style&gt;\n    &lt;button id='resetButton'&gt;All Precincts&lt;/button&gt;\n  \",position = \"topleft\"\n        )\n    }\n    \n  })\n  \n  output$map_plot &lt;- renderLeaflet({\n    filtered_map_plot()\n  })\n  \n  # Observe leaflet click event for precincts\n  observeEvent(input$map_plot_shape_click, {\n    event &lt;- input$map_plot_shape_click\n    \n    if (!is.null(event$id)) {\n      # If a precinct is clicked, update the input for precinct selection\n      clicked_precinct &lt;- event$id\n      updateSelectInput(session, \"Precinct\", selected = clicked_precinct)\n    }\n  })\n  \n  observeEvent(input$reset_map_filter, {\n    updateSelectInput(session, \"Precinct\", selected = 'All')\n  })\n  \n  \n}\n\n# Run the Shiny app\nshinyApp(ui, server)\n\n\n\n\nMatching to Improve Ron DeSantis voteshare in the Florida Elections Study (FES) and the CES\nThis figure is from an earlier version of the survey weighting paper.\n\n\nCode\nlibrary(tidyverse)\nlibrary(scales)\n#loading in data\nfes_out &lt;- read_csv('data/outcomes_all.csv')\nfes_leon_out &lt;- read_csv('data/outcomes_leon_all.csv')\nfes_pid_reg &lt;- read_csv('data/outcomes_all_pid_reg.csv')\nces_out &lt;- read_csv('data/outcomes_all_ces.csv')\n\n#merging the data and making the changes to produce the graph\nfes_out %&gt;% \n  bind_rows(ces_out, fes_pid_reg, fes_leon_out) %&gt;% \n  filter(cand == 'DeSantis') %&gt;% \n  mutate(lower_95 = dv_val - 1.96 * se,\n         upper_95 = dv_val + 1.96 * se,\n         lower_84 = dv_val - 1.4051 * se,\n         upper_84 = dv_val + 1.4051 * se,\n         strata = str_replace_all(strata, 'Pid', 'Party Reg.'),\n         strata = str_replace_all(strata, 'Age, Gender, Race', \n                                  'Demographics'),\n         strata = factor(strata,\n                         levels = c('No Stratification',\n                                    'County, Votemode, Gender, Race, Party Reg.',\n                                    'County, Votemode, Demographics',\n                                    'County, Votemode, Demographics, Party Reg.')),\n         scheme = str_replace_all(scheme, 'party', 'Party'),\n         scheme = str_replace_all(scheme, 'Party', 'Party Reg.'),\n         scheme = str_replace_all(scheme, 'precinct', 'Precinct'),\n         scheme = str_replace_all(scheme, 'CMAGR', 'County \\n Votemode \\n Demographics'),\n         scheme = str_replace_all(scheme, '\\\\+', '\\n'),\n         scheme = str_replace_all(scheme, 'Votemode', 'Vote Mode'),\n         survey = factor(survey,\n                         levels = c('CES',\n                                    'FES',\n                                    'FES w/Leon resample',\n                                    'FES PID with Reg')),\n         across(where(is.numeric),~./100)) %&gt;% \n  filter(strata == 'No Stratification'|\n         strata == 'County, Votemode, Demographics, Party Reg.')  %&gt;% \n  ggplot(aes(x = scheme, y = dv_val, color = survey, shape = survey))+\n  geom_linerange(aes(ymin = lower_84, ymax = upper_84), \n                 position = position_dodge(width = .75),\n                 linewidth = 1.5)+\n  geom_pointrange(aes(ymin = lower_95, ymax = upper_95), \n                  position = position_dodge(width = .75),\n                  size = .75)+\n  ggh4x::facet_nested_wrap(vars(strata), ncol = 4)+\n  geom_hline(aes(yintercept = .594), linetype = 2)+\n  scale_color_brewer(palette = 'Dark2')+\n  labs(color = '', shape = '', title = 'Stratification Variables',\n       caption = 'Notes: Exact matching was done on county. \n       Demographics = Age,Gender, and Race',\n       x = '', y = 'DeSantis Voteshare')+\n  scale_y_continuous(limits = c(0.415, 0.635), breaks = c(0.45, 0.5, 0.55, 0.6),\n                     labels = percent_format()) + \n  theme_classic()+\n  theme(plot.title = element_text(hjust = .5, face = 'bold', color = 'gray54', size = 25),\n        plot.caption = element_text(color = 'gray54', size = 15),\n        legend.position = 'bottom',\n        legend.text = element_text(face = 'bold',size = 15),\n        strip.text = element_text(size = 13, face = 'bold'),\n        axis.text = element_text(size = 13, face = 'bold'),\n        axis.title.y = element_text(size = 13, face = 'bold'))"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "I am a third year PhD student in the Department of Political Science at Florida State University. My research interests are broadly political behavior, with a special focus on polrization, partisanship, social identity theory, and race and ethnic politics. I grew up in Buffalo, New York, and currently have two dogs, Roland Jameson Cutler (a Shepard mix) and Zero Nelson Cutler (an American Staffordshire Terrier maybe)."
  },
  {
    "objectID": "cv.html",
    "href": "cv.html",
    "title": "CV",
    "section": "",
    "text": "Download CV"
  },
  {
    "objectID": "classes.html",
    "href": "classes.html",
    "title": "Workshops",
    "section": "",
    "text": "While at FSU I have taught workshops on using R. Here I have a brief description of the workshop as well as a link to the course’s website."
  },
  {
    "objectID": "classes.html#summer-ri-workshop",
    "href": "classes.html#summer-ri-workshop",
    "title": "Workshops",
    "section": "Summer RI workshop",
    "text": "Summer RI workshop\nThis workshop is for incoming first year students to FSU. This workshop assumes no prior R experience and is designed to give incoming first year students a head start on learning to us R and Rstudio. The workshop covers installing R, basic functions in R, reading data into R, types of data, data cleaning, generating summary statistics, boolen logic, data visualization, for loops, and (briefly), writing functions in R. We also briefly cover expectations for graduate student life in general, and some aspects of using R that are tangentially related, such as computer file structures. The workshop is taught primarily using tidyverse, however for most applications the BaseR equivalent is also covered. The workshop is taught over four sessions, and the goal is for students to have a solid foundation for how R works before moving on to their first semester where they will solidify the skills taught in the class. I taught this workshop in the summer of 2023 and 2024, and helped develop the materials for the workshop for summer 2025."
  },
  {
    "objectID": "classes.html#summer-rii-workshop",
    "href": "classes.html#summer-rii-workshop",
    "title": "Workshops",
    "section": "Summer RII workshop",
    "text": "Summer RII workshop\nThis workshop is for rising second year PhD students, and builds off of the material covered in the RI workshop, as well as their classes throughout their first year. The goal of this workshop is to be a refresher on R for grad students after taking some time off, and to prepare them for taking MLE. Grad students who are not starting their second year have also taken it in the past."
  },
  {
    "objectID": "research.html#working-papers",
    "href": "research.html#working-papers",
    "title": "Research",
    "section": "",
    "text": "The Effect of Candidate Ideological Extremism on Vote Choice and Turnout (with Hans J.G. Hassell and Kevin Reuning)\nThis paper uses CES data from 2010 to 2022 to examine how voters’ perception of candidates’ ideological extremity influences their turnout and vote choice. Link to paper.\n\n\n\nWho’s in Office Anyways? Estimating the Race of Elected Officials from Names with Neural Networks"
  }
]